{"version":3,"sources":["features/auth/authSlice.js","features/flashMesssage/flashMessageSlice.js","setAuthTokenAsHeader.js","components/NavigationBar/NavigationBar.jsx","UserFunctions.js","components/Landing/Landing.jsx","components/Login/Login.jsx","components/Register/Register.jsx","components/Profile/Profile.jsx","components/Post/Post.jsx","components/FlashMessage/FlashMessage.jsx","App.js","serviceWorker.js","features/post/postSlice.js","store.js","index.js","Landschaft.jpg"],"names":["authSlice","createSlice","name","initialState","isAuthenticated","user","admin","reducers","setCurrentUser","state","action","isEmpty","payload","role","logoutCurrentUser","localStorage","removeItem","actions","selectUser","auth","selectAuth","selectAdmin","flashMessageSlice","text","type","addFlashMessage","deleteFlashMessage","selectText","flashMessage","selectType","setAuthTokenAsHeader","token","axios","defaults","headers","common","NavigationBar","props","useSelector","isAdmin","dispatch","useDispatch","useState","sessionTime","setSessionTime","useEffect","getItem","exp","jwt_decode","Date","now","diff","Math","round","computeCounter","loginBtn","Nav","Item","Button","className","href","variant","size","logoutBtn","onClick","window","location","reload","sessionCounter","id","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Link","getPosts","get","then","response","data","catch","err","console","warn","Landing","setResult","setIsFetchingPosts","res","reverse","fetchPosts","firstName","Login","email","setEmail","matchMedia","matches","setMatches","password","setPassword","errors","setErrors","isLoading","setIsLoading","addEventListener","e","Container","fluid","Row","Badge","Form","onSubmit","preventDefault","post","setItem","login","history","push","setTimeout","autoComplete","Group","Control","required","placeholder","value","onChange","target","disabled","block","Col","Spinner","animation","Register","setFirstName","lastName","setLastName","repeatPassword","setRepeatPassword","newUser","register","error","Profile","userApp","willBeNotificated","setWillBeNotificated","setisLoading","showChangeName","setShowChangeName","handleCloseChangeName","Modal","show","onHide","Header","closeButton","Title","Body","Label","Footer","put","updateUserName","notification","updateUser","finally","controlId","Check","defaultChecked","label","Post","postHeader","setPostHeader","postContent","setPostContent","result","fetchedComments","setFetchedComments","showAddComment","setShowAddComment","showComments","setShowComments","showPostForm","setShowPostForm","commentContent","setCommentContent","relatedPost","setRelatedPost","postCreator","creatorName","LogoImage","handleAddCommentClose","handleShowCommentsClose","handleShowPostFormClose","fetchComments","getRelatedComments","postForm","Fragment","aria-label","submitPost","postId","shortid","generate","as","rows","comment","content","creator","submitComment","length","map","Card","style","width","commentId","delete","_id","Text","created","split","substring","lastIndexOf","Subtitle","FlashMessage","classnames","App","tokenExpired","exact","path","component","Boolean","hostname","match","postSlice","posts","addPost","header","removePost","index","indexOf","splice","configureStore","reducer","authReducer","flashMessageReducer","postReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.8427442e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    admin: false\r\n  },\r\n  reducers: {\r\n    setCurrentUser: (state, action) => {\r\n        state.isAuthenticated = !isEmpty(action.payload)\r\n        state.user = action.payload\r\n        state.admin = (action.payload.role === \"admin\")\r\n    },\r\n    logoutCurrentUser: state => {\r\n        state.isAuthenticated = false\r\n        state.user = {}\r\n        localStorage.removeItem('usertoken')\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCurrentUser, logoutCurrentUser } = authSlice.actions;\r\n\r\nexport const selectUser = state => state.auth.user;\r\nexport const selectAuth = state => state.auth.isAuthenticated;\r\nexport const selectAdmin = state => state.auth.admin;\r\n\r\nexport default authSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const flashMessageSlice = createSlice({\r\n  name: 'flashMessage',\r\n  initialState: {\r\n    text: \"\",\r\n    type: \"\"\r\n  },\r\n  reducers: {\r\n    addFlashMessage: (state, action) => {\r\n        state.text = action.payload.text\r\n        state.type = action.payload.type\r\n    },\r\n    deleteFlashMessage: state => {\r\n        state.text = \"\"\r\n        state.type = \"\"\r\n    }\r\n  },\r\n});\r\n\r\nexport const { addFlashMessage, deleteFlashMessage } = flashMessageSlice.actions;\r\n\r\nexport const selectText = state => state.flashMessage.text\r\nexport const selectType = state => state.flashMessage.type\r\n\r\nexport default flashMessageSlice.reducer;","import axios from 'axios';\r\n\r\nexport default function setAuthTokenAsHeader(token) {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport {Navbar, Nav, Button} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectAuth, logoutCurrentUser, selectAdmin } from '../../features/auth/authSlice'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\nimport './style.css';\r\nimport setAuthTokenAsHeader from '../../setAuthTokenAsHeader'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nexport default function NavigationBar(props) {\r\n    const isAuthenticated = useSelector(selectAuth)\r\n    const isAdmin = useSelector(selectAdmin)\r\n    const dispatch = useDispatch()\r\n    const [sessionTime, setSessionTime] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setSessionTime(computeCounter())\r\n    }, []);\r\n   \r\n    const loginBtn = (\r\n        <Nav.Item><Button className=\"loginButton\" href=\"#login\" variant=\"primary\" size=\"sm\">Login</Button>{' '}</Nav.Item>\r\n    );\r\n    const logoutBtn = (     \r\n        <Nav.Item><Button onClick={handleLogout} className=\"logoutButton\" variant=\"primary\" size=\"sm\">Logout</Button>{' '}</Nav.Item>\r\n    );\r\n\r\n    const sessionCounter = (\r\n        <Nav.Item><Button id=\"sessionCounter\" variant=\"outline-primary\" size=\"sm\">Sitzung endet in: {sessionTime} min</Button>{' '}</Nav.Item>\r\n    );\r\n\r\n    function handleLogout() {\r\n        dispatch(logoutCurrentUser())\r\n        dispatch(addFlashMessage({\r\n            text: \"Sie wurden erfolgreich ausgeloggt.\",\r\n            type: \"success\"\r\n        }))\r\n        setAuthTokenAsHeader(false)\r\n        window.location.reload()\r\n    }\r\n\r\n    function computeCounter() {\r\n        const token = localStorage.getItem('usertoken')\r\n        if(token) {\r\n            const { exp } = jwt_decode(token)\r\n            if (!(Date.now() >= exp * 1000)) {\r\n                var diff = exp*1000 - Date.now()\r\n                return Math.round(((diff % 86400000) % 3600000) / 60000)\r\n            }else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar id=\"navbar\" bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand id=\"logo\" href=\"#\">Socializor</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Item><Nav.Link id=\"posts\" href=\"#posts\">Sprüche</Nav.Link></Nav.Item>\r\n                    {!isAuthenticated && <Nav.Item><Button className=\"registerButton\" href=\"#register\" variant=\"primary\" size=\"sm\">Registrieren</Button>{' '}</Nav.Item>}\r\n                    {isAuthenticated && <Nav.Item><Button href=\"#profile\" className=\"profileButton\" variant=\"primary\" size=\"sm\">Profil</Button>{' '}</Nav.Item>}\r\n                </Nav>\r\n                <Nav className=\"ml-auto\">\r\n                    {isAuthenticated && sessionCounter}\r\n                    {isAdmin && <Nav.Item><Button id=\"adminBtn\" size=\"sm\" variant=\"outline-danger\">Admin</Button>{''}</Nav.Item>}\r\n                    {isAuthenticated? logoutBtn : loginBtn}\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar> \r\n    )  \r\n}","import axios from 'axios'\r\n\r\nexport const register = newUser => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/users/register', newUser)  \r\n    .then(response => {\r\n      return response.data\r\n    })\r\n}\r\n\r\nexport const login = user => {\r\n    return axios\r\n      .post('https://glacial-fortress-07261.herokuapp.com/users/login', user)\r\n      .then(response => {\r\n        localStorage.setItem('usertoken', response.data)\r\n        return response.data\r\n      })\r\n}\r\n\r\nexport const getProfile = () => {\r\n  return axios\r\n    .get('https://glacial-fortress-07261.herokuapp.com/users/profile')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const validateToken = () => {\r\n  return axios\r\n    .get('https://glacial-fortress-07261.herokuapp.com/users/validateToken')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const submitPost = post => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/posts/submit', post)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const getPosts = () => {\r\n  return axios  \r\n    .get('https://glacial-fortress-07261.herokuapp.com/posts/fetch')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const removePost = postId => {\r\n  return axios\r\n    .delete('https://glacial-fortress-07261.herokuapp.com/posts/delete/' + postId)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const sendEmails = email => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/emails/sendemail', email)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const updateUser = user => {\r\n  return axios\r\n    .put('https://glacial-fortress-07261.herokuapp.com/users/update/' + user.email + '/' + user.notification)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const submitComment = comment => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/posts/submitComment', comment)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const getRelatedComments = post => {\r\n  return axios  \r\n    .get('https://glacial-fortress-07261.herokuapp.com/posts/fetchComments/' + post)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const commentNotification = data => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/emails/commentNotification', data)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const removeComment = commentId => {\r\n  return axios\r\n    .delete('https://glacial-fortress-07261.herokuapp.com/posts/deleteComment/' + commentId)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const updateUserName = user => {\r\n  return axios\r\n    .put('https://glacial-fortress-07261.herokuapp.com/users/updateUser/' + user.firstName + '/' + user.lastName + '/' + user.email)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAuth } from '../../features/auth/authSlice'\r\nimport { getPosts } from '../../UserFunctions';\r\nimport { useEffect } from 'react';\r\n  \r\nexport default function Landing() {\r\n    const token = localStorage.getItem('usertoken')\r\n    const isAuthenticated = useSelector(selectAuth)\r\n    const [ result, setResult ] = useState([])\r\n    const [ isFetchingPosts, setIsFetchingPosts ] = useState(false)\r\n\r\n    useEffect(() => {\r\n      fetchPosts()\r\n    }, []);\r\n\r\n    /*\r\n        * Returns array of all posts, fetched from the database\r\n        */\r\n    function fetchPosts() {\r\n      try {\r\n          setIsFetchingPosts(true)\r\n          getPosts().then((res) => setResult(res.reverse()))\r\n      }finally {\r\n          setIsFetchingPosts(false)\r\n      }\r\n    }      \r\n\r\n    let name = \"\"\r\n    if(token && isAuthenticated) {\r\n      const user = jwt_decode(token)\r\n      name = user.firstName\r\n    }\r\n\r\n    return(        \r\n      <div className=\"container\">\r\n        <div className=\"jumbotron mt-5\">\r\n          <div className=\"col-sm-8 mx-auto\">\r\n            <h1 className=\"text-center\">Willkommen {name}</h1>\r\n          </div>\r\n        </div>\r\n      </div>    \r\n    );  \r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Spinner, Container, Row, Col, Badge } from 'react-bootstrap';\r\nimport './style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { login } from '../../UserFunctions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentUser } from '../../features/auth/authSlice'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\n  \r\nexport default function Login(props) {\r\n    const [ email, setEmail ] = useState('')\r\n    const [ matches, setMatches ] = useState(window.matchMedia(\"(max-width: 768px)\").matches)\r\n    const [ password, setPassword ] = useState('')\r\n    const [ errors, setErrors ] = useState({ })\r\n    const [ isLoading, setIsLoading ] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const handler = e => setMatches(e.matches)\r\n        window.matchMedia(\"(min-width: 768px)\").addEventListener('change', handler);\r\n    });\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrors({ })\r\n        const user = { email, password }\r\n\r\n        login(user).then(res => {\r\n          if (!res.errors) {\r\n            dispatch(setCurrentUser({ email }))\r\n            dispatch(addFlashMessage({ \r\n                text: \"Der Login war erfolgreich\",\r\n                type: \"success\"\r\n            }))\r\n            props.history.push(`/`)\r\n            setTimeout(function(){\r\n                window.location.reload()\r\n            }, 1000);\r\n          }else {\r\n            setErrors(res.errors)\r\n            setIsLoading(false)\r\n          }\r\n        })\r\n    }\r\n\r\n    return(        \r\n            <Container fluid id=\"loginContainer\">\r\n                {matches &&\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Badge bg=\"secondary\">Mobile Version</Badge>\r\n                </Row>}\r\n                <Row className=\"justify-content-md-center\">\r\n                    <h2 className=\"brand\">Post App</h2>\r\n                </Row>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Form onSubmit={onSubmit} className=\"loginForm\" autoComplete=\"off\" id=\"form\">\r\n                        {errors.login && <div className=\"alert alert-danger\">{errors.login}</div>}\r\n                        <Form.Group className=\"emailField\">\r\n                            <Form.Control \r\n                                id = \"email\" required\r\n                                type=\"email\" \r\n                                placeholder=\"E-Mail-Adresse\"\r\n                                value={email}\r\n                                onChange={e => setEmail(e.target.value)}\r\n                            />\r\n                            </Form.Group>\r\n\r\n                        <Form.Group className=\"passwordField\">\r\n                            <Form.Control \r\n                                id=\"password\" required\r\n                                type=\"password\" \r\n                                placeholder=\"Passwort\" \r\n                                value={password}\r\n                                onChange={e => setPassword(e.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                        <Button size=\"sm\" type=\"submit\" disabled={isLoading} className=\"button\" variant=\"primary\" block>Einloggen</Button>\r\n                    </Form>\r\n                </Row>\r\n                <Row className=\"justify-content-md-center\">\r\n                    {isLoading &&\r\n                    <Col>\r\n                        <Spinner id=\"loadingSpinner\" animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </Spinner>\r\n                    </Col>    \r\n                    }\r\n                </Row>\r\n            </Container>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Col, Spinner } from 'react-bootstrap';\r\nimport './style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { register } from '../../UserFunctions';\r\nimport { useDispatch } from 'react-redux'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\n  \r\nexport default function Register(props) {\r\n    const [firstName, setFirstName ] = useState('')\r\n    const [lastName, setLastName ] = useState('')\r\n    const [email, setEmail ] = useState('')\r\n    const [password, setPassword ] = useState('')\r\n    const [repeatPassword, setRepeatPassword ] = useState('')\r\n    const [errors, setErrors ] = useState({ })\r\n    const [isLoading, setIsLoading ] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        setErrors({ })\r\n        setIsLoading(true)\r\n\r\n        const newUser = { firstName, lastName, email, password, repeatPassword }\r\n        \r\n        register(newUser).then(res => {\r\n            if (!res.errors) {\r\n                dispatch(addFlashMessage({ \r\n                    text: \"Die Registrierung war erfolgreich\",\r\n                    type: \"success\"\r\n                }))\r\n                props.history.push(`/login`)\r\n            }else {\r\n                dispatch(addFlashMessage({ \r\n                    text: \"Die Registrierung war nicht erfolgreich\",\r\n                    type: \"error\"\r\n                }))\r\n                setErrors(res.errors)\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }\r\n    \r\n    return(    \r\n        <div className=\"container\" id=\"registerContainer\">\r\n            <h2 className=\"brand\">Post App</h2>\r\n            <Form onSubmit={onSubmit} className=\"registerForm\" autoComplete=\"off\">\r\n                {errors.user && <div className=\"alert alert-danger\">{errors.user}</div>}\r\n                {errors.repeatPassword && <div className=\"alert alert-danger\">{errors.repeatPassword}</div>}\r\n                <Form.Group className=\"nameRow\">\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <Form.Control \r\n                                id=\"firstName\" required\r\n                                placeholder=\"Vorname\" \r\n                                value={firstName}\r\n                                onChange={e => setFirstName(e.target.value)} \r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control \r\n                                id=\"lastName\" required\r\n                                placeholder=\"Nachname\" \r\n                                value={lastName}\r\n                                onChange={e => setLastName(e.target.value)}  \r\n                            />\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form.Group>\r\n                    \r\n                <Form.Group className=\"emailField\">\r\n                    <Form.Control \r\n                        id=\"email\" required\r\n                        type=\"email\" \r\n                        placeholder=\"E-Mail-Adresse\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}   \r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"password\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)} \r\n                    />\r\n                </Form.Group>\r\n                \r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"repeatPassword\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort wiederholen\" \r\n                        value={repeatPassword}\r\n                        onChange={e => setRepeatPassword(e.target.value)}     \r\n                    />\r\n                </Form.Group>\r\n\r\n                <Button \r\n                    disabled={isLoading} \r\n                    type=\"submit\" \r\n                    className=\"button\" \r\n                    variant=\"primary\" \r\n                    size=\"sm\" block>\r\n                        Registrieren\r\n                </Button>\r\n\r\n                {isLoading && <Spinner id=\"loadingSpinner\" animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>}\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../../features/auth/authSlice'\r\nimport { Form, Button, Modal } from 'react-bootstrap'\r\nimport { updateUser, updateUserName } from './../../UserFunctions'\r\nimport { useState } from 'react';\r\n\r\nexport default function Profile(props) {\r\n    const userApp = useSelector(selectUser)\r\n    const [ willBeNotificated, setWillBeNotificated ] = useState(false)\r\n    const [ isLoading, setisLoading ] = useState(false)\r\n    const [ showChangeName, setShowChangeName ] = useState(false)\r\n    const [ firstName, setFirstName ] = useState('')\r\n    const [ lastName, setLastName ] = useState('')\r\n\r\n    const handleShowChangeName = () => setShowChangeName(true)\r\n    const handleCloseChangeName = () => setShowChangeName(false)\r\n\r\n    useEffect(() => {\r\n      if(!localStorage.getItem('usertoken')) {\r\n        props.history.push('/login')\r\n      }\r\n    })\r\n\r\n    function onSubmit() {\r\n      setisLoading(true)\r\n      var user = {}\r\n      user.email = userApp.email\r\n      user.notification = willBeNotificated\r\n\r\n      updateUser(user)\r\n      .finally(setisLoading(false))\r\n      setTimeout(function(){\r\n        window.location.reload()\r\n      }, 1000);    \r\n    }\r\n\r\n    function submitNewName() {\r\n      var user = { firstName, lastName, email: userApp.email }\r\n      updateUserName(user)\r\n      handleCloseChangeName()\r\n      setTimeout(function(){\r\n        window.location.reload()\r\n      }, 1000);    }\r\n    \r\n    return(        \r\n      <div className=\"container\">\r\n        <div className=\"jumbotron mt-5\">\r\n          <div className=\"col-sm-8 mx-auto\">\r\n            <h1 className=\"text-center\">PROFIL</h1>\r\n            <p>Vorname: {userApp.firstName}</p>\r\n            <p>Nachname: {userApp.lastName}</p>\r\n            <Button onClick={handleShowChangeName} variant=\"primary\" size=\"sm\"> Namen ändern</Button>\r\n            <Modal show={showChangeName} onHide={handleCloseChangeName}>\r\n                <Modal.Header closeButton> \r\n                <Modal.Title>Namen ändern</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                      <Form.Group>\r\n                        <Form.Label>Vorname</Form.Label>\r\n                        <Form.Control \r\n                          placeholder=\"Neuer Vorname\" \r\n                          value={firstName}\r\n                          onChange={e => setFirstName(e.target.value)}\r\n                        />\r\n                      </Form.Group>\r\n\r\n                      <Form.Group>\r\n                        <Form.Label>Nachname</Form.Label>\r\n                        <Form.Control \r\n                          placeholder=\"Neuer Nachname\" \r\n                          value={lastName}\r\n                          onChange={e => setLastName(e.target.value)}\r\n                        />\r\n                      </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleCloseChangeName}>\r\n                    Schließen\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={submitNewName}>\r\n                    Speichern\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <p>Email: {userApp.email}</p>\r\n            <Form onSubmit={onSubmit}>\r\n              <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check defaultChecked={userApp.notification} disabled={isLoading} onClick={ e => setWillBeNotificated(!userApp.notification) } type=\"checkbox\" label=\"Ich will Mitteilungen erhalten\" />\r\n              </Form.Group>\r\n              <Button size=\"sm\" variant=\"primary\" type=\"submit\">Speichern</Button>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>    \r\n    );  \r\n}","import React, { useState } from 'react'\r\nimport { Button, Form, Modal, Card, Spinner, Container, Col, Row } from \"react-bootstrap\"\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAuth, selectUser, selectAdmin } from '../../features/auth/authSlice'\r\nimport { getPosts, submitPost, removePost, removeComment, sendEmails, submitComment, getRelatedComments, commentNotification } from '../../UserFunctions';\r\nimport shortid from 'shortid'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport LogoImage from './../../Landschaft.jpg'\r\n\r\nimport './style.css'\r\nimport { useEffect } from 'react';\r\n\r\nexport default function Post(props) {\r\n    const [ postHeader, setPostHeader ] = useState('')\r\n    const [ postContent, setPostContent ] = useState('')\r\n    const [ result, setResult ] = useState([])\r\n    const [ fetchedComments, setFetchedComments ] = useState([])\r\n    const [ isLoading, setIsLoading ] = useState(false)\r\n    const [ showAddComment, setShowAddComment ] = useState(false)\r\n    const [ showComments, setShowComments ] = useState(false)\r\n    const [ showPostForm, setShowPostForm ] = useState(false)\r\n    const [ commentContent, setCommentContent ] = useState('')\r\n    const [ relatedPost, setRelatedPost ] = useState('')\r\n    const [ isFetchingPosts, setIsFetchingPosts ] = useState(false)\r\n    const isAuthenticated = useSelector(selectAuth)\r\n    const postCreator = useSelector(selectUser)\r\n    const isAdmin = useSelector(selectAdmin)\r\n    const creatorName = postCreator.firstName + \" \" + postCreator.lastName\r\n\r\n    useEffect(() => {\r\n        fetchPosts()\r\n    }, []);\r\n\r\n    /*\r\n     * Hintergrundbild\r\n     */\r\n    var sectionStyle = {\r\n        backgroundImage: `url(${LogoImage})`\r\n    }\r\n\r\n    const handleAddCommentClose = () => setShowAddComment(false)\r\n    const handleAddCommentShow = () => setShowAddComment(true)\r\n\r\n    const handleShowCommentsClose = () => setShowComments(false)\r\n    const handleShowCommentsShow = () => setShowComments(true)\r\n\r\n    const handleShowPostFormClose = () => setShowPostForm(false)\r\n    const handleShowPostFormShow = () => {\r\n        if(isAuthenticated) {\r\n            setShowPostForm(true)\r\n        }else {\r\n            props.history.push(`/login`)\r\n        }\r\n    } \r\n\r\n    /*\r\n     * Posts the given post to the database\r\n     */\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        const post = { postHeader, postContent, creatorName, postId: shortid.generate() }\r\n        submitPost(post).finally(() => {\r\n            setIsLoading(false)\r\n            window.location.reload()\r\n        })\r\n        sendEmails(postCreator.email)\r\n    }\r\n\r\n    /*\r\n     * Submits comment to the database. Attribute with related postId is added to the comment, to\r\n     * find the releated post for rendering.\r\n     */\r\n    function postComment() {\r\n        setShowAddComment(false)\r\n        var comment = {\r\n            content: commentContent,\r\n            creator: creatorName,\r\n            post: relatedPost \r\n        }\r\n        submitComment(comment) \r\n        commentNotification(comment)\r\n    }\r\n\r\n    /*\r\n     * Returns array of all posts, fetched from the database\r\n     */\r\n    function fetchPosts() {\r\n        try {\r\n            setIsFetchingPosts(true)\r\n            getPosts().then((res) => setResult(res.reverse()))\r\n        }finally {\r\n            setIsFetchingPosts(false)\r\n        }\r\n    }        \r\n\r\n    function fetchComments(post) {\r\n        getRelatedComments(post).then((res) => setFetchedComments(res.reverse()))\r\n    }\r\n\r\n    const postForm = (\r\n        <React.Fragment>\r\n            <Modal show={showPostForm} onHide={handleShowPostFormClose}>\r\n                <Modal.Header closeButton> \r\n                <Modal.Title>Einen neuen Spruch verfassen</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form id=\"postForm\" autoComplete=\"off\">\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                                id=\"postHeader\" required\r\n                                placeholder=\"Spruch-Überschrift\"\r\n                                onChange={e => setPostHeader(e.target.value)}\r\n                                value={postHeader}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <textarea \r\n                                id=\"postContent\" required\r\n                                className=\"form-control\" \r\n                                aria-label=\"With textarea\"\r\n                                placeholder=\"Inhalt\"\r\n                                onChange={e => setPostContent(e.target.value)}\r\n                                value={postContent}\r\n                            />\r\n                        </Form.Group> \r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleShowPostFormClose}>\r\n                    Schließen\r\n                </Button>\r\n                <Button disabled={isLoading} variant=\"primary\" onClick={onSubmit}>\r\n                    Post veröffentlichen\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n \r\n            <Modal show={showAddComment} onHide={handleAddCommentClose}>\r\n                <Modal.Header closeButton> \r\n                <Modal.Title>Neuen Kommentar verfassen</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Inhalt</Form.Label>\r\n                        <Form.Control \r\n                            value={commentContent} \r\n                            onChange={e => setCommentContent(e.target.value)} \r\n                            as=\"textarea\" rows={4} \r\n                        />\r\n                    </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleAddCommentClose}>\r\n                    Schließen\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={postComment}>\r\n                    Kommentieren\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            \r\n            <Modal show={showComments} onHide={handleShowCommentsClose}>\r\n                <Modal.Header closeButton> \r\n                <Modal.Title>Kommentare</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {\r\n                        fetchedComments.length === 0 ? <p>Es gibt noch keine Kommentare</p> :\r\n                        fetchedComments.map(comment => \r\n                            <Card id=\"comment\" style={{ width: '25rem' }}>\r\n                                {isAdmin && <Button onClick={e => removeComment(e.target.name).then(() => window.location.reload())} id=\"removeCommentBtn\" name={comment._id} variant=\"danger\" size=\"sm\">Kommentar löschen</Button>}\r\n                                <Card.Body>\r\n                                    <Card.Title>{'Kommentar von ' + comment.creator}</Card.Title>\r\n                                    <Card.Text>{comment.content}</Card.Text>\r\n                                    <footer className=\"blockquote-footer\">{comment.created.split('T')[0] + ' ' + comment.created.substring(comment.created.lastIndexOf('T')+1, comment.created.lastIndexOf('.'))}</footer>\r\n                                </Card.Body>\r\n                            </Card>\r\n                    )}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleShowCommentsClose}>\r\n                    Schließen\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const post = (\r\n        <ul>\r\n            {result.map(res => \r\n                <div id=\"postContainer\">\r\n                    <Card id=\"singlePost\" style={{ width: '25rem' }}>\r\n                        <Card.Body>\r\n                            {isAdmin && <Button onClick={e => removePost(e.target.name).then(() => window.location.reload())} type=\"submit\" id=\"removePostBtn\" name={res._id} variant=\"danger\" size=\"sm\">Spruch löschen</Button>}\r\n                            <Card.Title>{res.postHeader}</Card.Title>\r\n                        <Card.Subtitle className=\"mb-2 text-muted\">{'veröffentlicht von ' + res.creatorName}</Card.Subtitle>\r\n                            <Card.Text>{res.postContent}</Card.Text>\r\n                            <footer className=\"blockquote-footer\">{res.created.split('T')[0] + ' ' + res.created.substring(res.created.lastIndexOf('T')+1, res.created.lastIndexOf('.'))}</footer>\r\n                                {isAuthenticated && <Button onClick={() => {\r\n                                    fetchComments(res.postId)\r\n                                    handleShowCommentsShow()\r\n                                }}\r\n                                variant=\"link\">\r\n                                    Kommentare anzeigen\r\n                            </Button>}\r\n\r\n                            {isAuthenticated && <Button onClick={() => {\r\n                                    setRelatedPost(res.postId)\r\n                                    handleAddCommentShow()\r\n                                }}\r\n                                variant=\"link\">\r\n                                    Kommentieren\r\n                            </Button>}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            )}\r\n        </ul>\r\n    );\r\n\r\n    return(\r\n        <div id=\"container\">\r\n            <div id=\"postContainer\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button id=\"createPostBtn\" variant=\"primary\" onClick={handleShowPostFormShow}>Neuer Spruch</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            {!(result.length > 0) && <Spinner id=\"fetchSpinner\" animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                            </Spinner>}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                {postForm}\r\n                {post}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport classnames from 'classnames'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectText, selectType } from '../../features/flashMesssage/flashMessageSlice'\r\nimport { deleteFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\nimport './style.css'\r\n\r\nexport default function FlashMessage() {\r\n    const text = useSelector(selectText)\r\n    const type = useSelector(selectType)\r\n    const dispatch = useDispatch()\r\n\r\n    function onClick() {\r\n        dispatch(deleteFlashMessage())\r\n    }\r\n\r\n    return(\r\n        <div id=\"message\" className={classnames('alert', {\r\n            'alert-success': type === 'success',\r\n            'alert-danger': type === 'error'\r\n        })}>\r\n            {text && <button onClick={onClick} className=\"close\"><span>&times;</span></button>}\r\n            {text}\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport NavigationBar from './components/NavigationBar/NavigationBar';\r\nimport Landing from './components/Landing/Landing';\r\nimport Login from './components/Login/Login';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport Register from './components/Register/Register';\r\nimport Profile from './components/Profile/Profile'\r\nimport Post from './components/Post/Post'\r\nimport FlashMessage from './components/FlashMessage/FlashMessage'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCurrentUser, selectUser } from './features/auth/authSlice'\r\nimport setAuthTokenAsHeader from './setAuthTokenAsHeader'\r\nimport { getProfile, validateToken } from './UserFunctions'\r\nimport { addFlashMessage } from './features/flashMesssage/flashMessageSlice';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(selectUser)\r\n\r\n  //Each time the page is loaded, it is checked, whether a jwt token is stored in the local storage\r\n  //If yes, the user is logged in automatically\r\n  useEffect(() => {\r\n    if(localStorage.getItem('usertoken')) {\r\n      var token = localStorage.getItem('usertoken')\r\n      setAuthTokenAsHeader(token)\r\n      if(!user.firstName) {\r\n        getProfile().then(res => {\r\n          if(res.errors) {\r\n            localStorage.removeItem('usertoken')\r\n            dispatch(addFlashMessage({ \r\n              text: res.errors.tokenExpired,\r\n              type: \"error\"\r\n            }))\r\n          }else {\r\n            dispatch(setCurrentUser(res))\r\n          }\r\n        })\r\n      }else {\r\n        validateToken().then(res => {\r\n          if(res.errors) {\r\n            localStorage.removeItem('usertoken')\r\n            dispatch(addFlashMessage({ \r\n              text: res.errors.tokenExpired,\r\n              type: \"error\"\r\n            }))\r\n          }\r\n        })\r\n      }\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavigationBar/>\r\n        <FlashMessage/>\r\n        <Route exact path=\"/\" component={Landing} />\r\n        <Route path=\"/register\" component={Register} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/profile\" component={Profile} />\r\n        <Route path=\"/posts\" component={Post} />    \r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid'\r\n\r\nexport const postSlice = createSlice({\r\n  name: 'post',\r\n  initialState: {\r\n    posts: []\r\n  },\r\n  reducers: {\r\n    addPost: (state, action) => {\r\n        const post = { \r\n          postHeader: action.payload.header,\r\n          postContent: action.payload.text,\r\n          postCreator: action.payload.creator,\r\n          created: Date.now(),\r\n          postId: shortid.generate()\r\n        }\r\n        state.posts.push(post)\r\n    },\r\n    removePost: (state, action) => {\r\n        const index = state.posts.indexOf(post => post.postId === action.payload.postId)\r\n        state.posts.splice(index, 1)\r\n    }\r\n  },\r\n});\r\n\r\nexport const { addPost, removePost } = postSlice.actions;\r\nexport const selectPosts = state => state.post.posts\r\n\r\nexport default postSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from '../src/features/auth/authSlice';\r\nimport flashMessageReducer from '../src/features/flashMesssage/flashMessageSlice'\r\nimport postReducer from '../src/features/post/postSlice'\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    flashMessage: flashMessageReducer,\r\n    post: postReducer\r\n  },\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>  \r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Landschaft.dcdcfa38.jpg\";"],"sourceRoot":""}