{"version":3,"sources":["features/auth/authSlice.js","features/flashMesssage/flashMessageSlice.js","setAuthTokenAsHeader.js","components/NavigationBar/NavigationBar.jsx","components/Landing/Landing.jsx","components/Login/Login.jsx","UserFunctions.js","components/Register/Register.jsx","components/Profile/Profile.jsx","components/Post/Post.jsx","components/FlashMessage/FlashMessage.jsx","App.js","serviceWorker.js","features/post/postSlice.js","store.js","index.js"],"names":["authSlice","createSlice","name","initialState","isAuthenticated","user","admin","reducers","setCurrentUser","state","action","isEmpty","payload","role","logoutCurrentUser","localStorage","removeItem","actions","selectUser","auth","selectAuth","selectAdmin","flashMessageSlice","text","type","addFlashMessage","deleteFlashMessage","selectText","flashMessage","selectType","setAuthTokenAsHeader","token","axios","defaults","headers","common","NavigationBar","props","useSelector","isAdmin","dispatch","useDispatch","loginBtn","Nav","Item","Button","className","href","variant","size","logoutBtn","onClick","window","location","reload","Navbar","id","bg","expand","Brand","Toggle","aria-controls","Collapse","Link","Landing","getItem","jwtDecode","firstName","Login","useState","email","setEmail","password","setPassword","errors","setErrors","Form","onSubmit","e","preventDefault","post","then","response","setItem","data","login","res","history","push","autoComplete","Group","Control","required","placeholder","value","onChange","target","block","Register","setFirstName","lastName","setLastName","repeatPassword","setRepeatPassword","isLoading","setIsLoading","newUser","register","catch","error","console","finally","Row","Col","disabled","Profile","useEffect","_id","Post","postHeader","setPostHeader","postContent","setPostContent","result","setResult","postCreator","creatorName","get","err","warn","reverse","postForm","submitPost","postId","shortid","generate","aria-label","length","map","log","delete","class","created","split","FlashMessage","classnames","App","tokenExpired","exact","path","component","Boolean","hostname","match","postSlice","posts","addPost","header","creator","Date","now","removePost","index","indexOf","splice","configureStore","reducer","authReducer","flashMessageReducer","postReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cbecbc0a.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    admin: false\r\n  },\r\n  reducers: {\r\n    setCurrentUser: (state, action) => {\r\n        state.isAuthenticated = !isEmpty(action.payload)\r\n        state.user = action.payload\r\n        state.admin = (action.payload.role === \"admin\")\r\n    },\r\n    logoutCurrentUser: state => {\r\n        state.isAuthenticated = false\r\n        state.user = {}\r\n        localStorage.removeItem('usertoken')\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCurrentUser, logoutCurrentUser } = authSlice.actions;\r\n\r\nexport const selectUser = state => state.auth.user;\r\nexport const selectAuth = state => state.auth.isAuthenticated;\r\nexport const selectAdmin = state => state.auth.admin;\r\n\r\nexport default authSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const flashMessageSlice = createSlice({\r\n  name: 'flashMessage',\r\n  initialState: {\r\n    text: \"\",\r\n    type: \"\"\r\n  },\r\n  reducers: {\r\n    addFlashMessage: (state, action) => {\r\n        state.text = action.payload.text\r\n        state.type = action.payload.type\r\n    },\r\n    deleteFlashMessage: state => {\r\n        state.text = \"\"\r\n        state.type = \"\"\r\n    }\r\n  },\r\n});\r\n\r\nexport const { addFlashMessage, deleteFlashMessage } = flashMessageSlice.actions;\r\n\r\nexport const selectText = state => state.flashMessage.text\r\nexport const selectType = state => state.flashMessage.type\r\n\r\nexport default flashMessageSlice.reducer;","import axios from 'axios';\r\n\r\nexport default function setAuthTokenAsHeader(token) {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n}","import React from \"react\";\r\nimport {Navbar, Nav, Button} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectAuth, logoutCurrentUser, selectAdmin } from '../../features/auth/authSlice'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\nimport './style.css';\r\nimport setAuthTokenAsHeader from '../../setAuthTokenAsHeader'\r\n\r\nexport default function NavigationBar(props) {\r\n    const isAuthenticated = useSelector(selectAuth)\r\n    const isAdmin = useSelector(selectAdmin)\r\n    const dispatch = useDispatch()\r\n   \r\n    const loginBtn = (\r\n        <Nav.Item><Button className=\"loginButton\" href=\"/login\" variant=\"primary\" size=\"sm\">Login</Button>{' '}</Nav.Item>\r\n    );\r\n    const logoutBtn = (     \r\n        <Nav.Item><Button onClick={handleLogout} className=\"logoutButton\" variant=\"primary\" size=\"sm\">Logout</Button>{' '}</Nav.Item>\r\n    );\r\n\r\n    function handleLogout() {\r\n        dispatch(logoutCurrentUser())\r\n        dispatch(addFlashMessage({\r\n            text: \"Sie wurden erfolgreich ausgeloggt.\",\r\n            type: \"success\"\r\n        }))\r\n        setAuthTokenAsHeader(false)\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <Navbar id=\"navbar\" bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand id=\"logo\" href=\"/\">React</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\r\n                    <Nav.Item><Nav.Link href=\"/posts\">Sprüche</Nav.Link></Nav.Item>\r\n                    {!isAuthenticated && <Nav.Item><Button className=\"registerButton\" href=\"/register\" variant=\"primary\" size=\"sm\">Registrieren</Button>{' '}</Nav.Item>}\r\n                    {isAuthenticated && <Nav.Item><Button href=\"/profile\" className=\"profileButton\" variant=\"primary\" size=\"sm\">Profil</Button>{' '}</Nav.Item>}\r\n                </Nav>\r\n                <Nav className=\"ml-auto\">\r\n                    {isAdmin && <Button id=\"adminBtn\" size=\"sm\" variant=\"outline-danger\">Admin</Button>}\r\n                    {isAuthenticated? logoutBtn : loginBtn}\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar> \r\n    )  \r\n}","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport jwtDecode from 'jwt-decode'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAuth } from '../../features/auth/authSlice'\r\n\r\nexport default function Landing() {\r\n    const token = localStorage.getItem('usertoken')\r\n    const isAuthenticated = useSelector(selectAuth)\r\n\r\n    let name = \"\"\r\n    if(token && isAuthenticated) {\r\n      const user = jwtDecode(token)\r\n      name = user.firstName\r\n    }\r\n\r\n    return(        \r\n      <div className=\"container\">\r\n        <div className=\"jumbotron mt-5\">\r\n          <div className=\"col-sm-8 mx-auto\">\r\n            <h1 className=\"text-center\">Wilkommen {name}</h1>\r\n          </div>\r\n        </div>\r\n      </div>    \r\n    );  \r\n}","import React, { useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { login } from '../../UserFunctions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentUser } from '../../features/auth/authSlice'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\n  \r\nexport default function Login(props) {\r\n    const [ email, setEmail ] = useState('')\r\n    const [ password, setPassword ] = useState('')\r\n    const [ errors, setErrors ] = useState({ })\r\n    const dispatch = useDispatch()\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n        setErrors({ })\r\n        const user = { email, password }\r\n\r\n        dispatch(setCurrentUser({ email }))\r\n\r\n        login(user).then(res => {\r\n          if (!res.errors) {\r\n            dispatch(addFlashMessage({ \r\n                text: \"Der Login war erfolgreich\",\r\n                type: \"success\"\r\n            }))\r\n            props.history.push(`/`)\r\n          }else {\r\n            setErrors(res.errors)\r\n            dispatch(addFlashMessage({ \r\n                text: \"Der Login war nicht erfolgreich\",\r\n                type: \"error\"\r\n            }))\r\n          }\r\n        }) \r\n    }\r\n    return(        \r\n        <div className=\"container\" id=\"loginContainer\">\r\n            <h2 className=\"brand\">JH Reactive</h2>\r\n            <Form onSubmit={onSubmit} className=\"loginForm\" autoComplete=\"off\">\r\n                {errors.login && <div className=\"alert alert-danger\">{errors.login}</div>}\r\n                <Form.Group className=\"emailField\">\r\n                    <Form.Control \r\n                        id = \"email\" required\r\n                        type=\"email\" \r\n                        placeholder=\"E-Mail-Adresse\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    </Form.Group>\r\n\r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"password\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort\" \r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />\r\n                </Form.Group>\r\n                    \r\n                <Button type=\"submit\" className=\"button\" variant=\"primary\" size=\"sm\" block>Einloggen</Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios'\r\n\r\nexport const register = newUser => {\r\n  return axios\r\n    .post('users/register', newUser)  \r\n    .then(response => {\r\n      return response.data\r\n    })\r\n}\r\n\r\nexport const login = user => {\r\n    return axios\r\n      .post('users/login', user)\r\n      .then(response => {\r\n        localStorage.setItem('usertoken', response.data)\r\n        return response.data\r\n      })\r\n}\r\n\r\nexport const getProfile = () => {\r\n  return axios\r\n    .get('users/profile')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const validateToken = () => {\r\n  return axios\r\n    .get('users/validateToken')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const submitPost = post => {\r\n  return axios\r\n    .post('posts/submit', post)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const getPosts = () => {\r\n  return axios  \r\n    .get('posts/fetch')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const removePost = postId => {\r\n  console.log(postId)\r\n  return axios\r\n    .delete('posts/delete/' + postId)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}","import React, { useState } from 'react';\r\nimport { Form, Button, Col } from 'react-bootstrap';\r\nimport './style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { register } from '../../UserFunctions';\r\nimport { useDispatch } from 'react-redux'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\n  \r\nexport default function Register(props) {\r\n    const [firstName, setFirstName ] = useState('')\r\n    const [lastName, setLastName ] = useState('')\r\n    const [email, setEmail ] = useState('')\r\n    const [password, setPassword ] = useState('')\r\n    const [repeatPassword, setRepeatPassword ] = useState('')\r\n    const [errors, setErrors ] = useState({ })\r\n    const [isLoading, setIsLoading ] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        setErrors({ })\r\n        setIsLoading(true)\r\n\r\n        const newUser = { firstName, lastName, email, password, repeatPassword }\r\n        \r\n        register(newUser).then(res => {\r\n            if (!res.errors) {\r\n                dispatch(addFlashMessage({ \r\n                    text: \"Die Registrierung war erfolgreich\",\r\n                    type: \"success\"\r\n                }))\r\n                props.history.push(`/login`)\r\n            }else {\r\n                dispatch(addFlashMessage({ \r\n                    text: \"Die Registrierung war nicht erfolgreich\",\r\n                    type: \"error\"\r\n                }))\r\n                setErrors(res.errors)\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        }).finally(()=>{\r\n            setIsLoading(false)\r\n        }) \r\n    }\r\n    \r\n    return(    \r\n        <div className=\"container\" id=\"registerContainer\">\r\n            <h2 className=\"brand\">JH Reactive</h2>\r\n            <Form onSubmit={onSubmit} className=\"registerForm\" autoComplete=\"off\">\r\n                {errors.user && <div className=\"alert alert-danger\">{errors.user}</div>}\r\n                {errors.repeatPassword && <div className=\"alert alert-danger\">{errors.repeatPassword}</div>}\r\n                <Form.Group className=\"nameRow\">\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <Form.Control \r\n                                id=\"firstName\" required\r\n                                placeholder=\"Vorname\" \r\n                                value={firstName}\r\n                                onChange={e => setFirstName(e.target.value)} \r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control \r\n                                id=\"lastName\" required\r\n                                placeholder=\"Nachname\" \r\n                                value={lastName}\r\n                                onChange={e => setLastName(e.target.value)}  \r\n                            />\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form.Group>\r\n                    \r\n                <Form.Group className=\"emailField\">\r\n                    <Form.Control \r\n                        id=\"email\" required\r\n                        type=\"email\" \r\n                        placeholder=\"E-Mail-Adresse\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}   \r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"password\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)} \r\n                    />\r\n                </Form.Group>\r\n                \r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"repeatPassword\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort wiederholen\" \r\n                        value={repeatPassword}\r\n                        onChange={e => setRepeatPassword(e.target.value)}     \r\n                    />\r\n                </Form.Group>\r\n\r\n                <Button \r\n                    disabled={isLoading} \r\n                    type=\"submit\" \r\n                    className=\"button\" \r\n                    variant=\"primary\" \r\n                    size=\"sm\" block>\r\n                        Registrieren\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../../features/auth/authSlice'\r\n\r\nexport default function Profile(props) {\r\n    const user = useSelector(selectUser)\r\n\r\n    useEffect(() => {\r\n      if(!localStorage.getItem('usertoken')) {\r\n        props.history.push('/login')\r\n      }\r\n    })\r\n    \r\n    return(        \r\n      <div className=\"container\">\r\n        <div className=\"jumbotron mt-5\">\r\n          <div className=\"col-sm-8 mx-auto\">\r\n            <h1 className=\"text-center\">PROFIL</h1>\r\n            <p>Vorname: {user.firstName}</p>\r\n            <p>Nachname: {user.lastName}</p>\r\n            <p>Email: {user.email}</p>\r\n            <p>id: {user._id}</p>\r\n          </div>\r\n        </div>\r\n      </div>    \r\n    );  \r\n}","import React, { useState } from 'react'\r\nimport { Button, Form } from \"react-bootstrap\"\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAuth, selectUser, selectAdmin } from '../../features/auth/authSlice'\r\nimport { getPosts, submitPost, removePost } from '../../UserFunctions';\r\nimport shortid from 'shortid'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './style.css'\r\nimport { useEffect } from 'react';\r\n\r\nexport default function Post() {\r\n    const [ postHeader, setPostHeader ] = useState('')\r\n    const [ postContent, setPostContent ] = useState('')\r\n    const [ result, setResult ] = useState([])\r\n    const isAuthenticated = useSelector(selectAuth)\r\n    const postCreator = useSelector(selectUser)\r\n    const isAdmin = useSelector(selectAdmin)\r\n    const creatorName = postCreator.firstName + \" \" + postCreator.lastName\r\n\r\n    useEffect(() => {\r\n        fetchPosts()\r\n    }, []);\r\n\r\n    /*\r\n     * Posts the given post to the database\r\n     */\r\n    function onSubmit() {\r\n        const post = { postHeader, postContent, creatorName, postId: shortid.generate() }\r\n        submitPost(post)\r\n    }\r\n\r\n    /*\r\n     * Returns array of all posts, fetched from the database\r\n     */\r\n    function fetchPosts() {\r\n        getPosts().then((res) => setResult(res.reverse()))\r\n    }\r\n\r\n    const postForm = (\r\n        <Form id=\"postForm\" onSubmit={onSubmit} autoComplete=\"off\">\r\n            <Form.Group>\r\n                <Form.Control\r\n                    id=\"postHeader\" required\r\n                    placeholder=\"Spruch-Überschrift\"\r\n                    onChange={e => setPostHeader(e.target.value)}\r\n                    value={postHeader}\r\n                />\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <textarea \r\n                    id=\"postContent\" required\r\n                    className=\"form-control\" \r\n                    aria-label=\"With textarea\"\r\n                    placeholder=\"Inhalt\"\r\n                    onChange={e => setPostContent(e.target.value)}\r\n                    value={postContent}\r\n                />\r\n            </Form.Group> \r\n            <Button type=\"submit\" id=\"submitBtn\" size=\"sm\">Spruch veröffentlichen</Button>\r\n        </Form>\r\n    );\r\n\r\n    return(\r\n        <div id=\"container\">\r\n            {isAuthenticated && postForm}\r\n            {\r\n                result.length && <ul>\r\n                    {result.map(res => \r\n                        <div id=\"postContainer\">\r\n                            {isAdmin && <Button onClick={e => removePost(e.target.name).then(() => window.location.reload())} type=\"submit\" id=\"removePostBtn\" name={res._id} variant=\"danger\" size=\"sm\">Spruch löschen</Button>}\r\n                            <div id=\"headerCard\" class=\"card-body\">\r\n                                {res.postHeader + \" (veröffentlicht von \" + res.creatorName + \")\"}\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                {res.postContent}\r\n                            </div>\r\n                            <div class=\"card-body\">\r\n                                {\"veröffentlicht: \" + res.created.split('T')[0]}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </ul>\r\n            }\r\n        </div> \r\n            \r\n    )\r\n}","import React from 'react'\r\nimport classnames from 'classnames'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectText, selectType } from '../../features/flashMesssage/flashMessageSlice'\r\nimport { deleteFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\nimport './style.css'\r\n\r\nexport default function FlashMessage() {\r\n    const text = useSelector(selectText)\r\n    const type = useSelector(selectType)\r\n    const dispatch = useDispatch()\r\n\r\n    function onClick() {\r\n        dispatch(deleteFlashMessage())\r\n    }\r\n\r\n    return(\r\n        <div id=\"message\" className={classnames('alert', {\r\n            'alert-success': type === 'success',\r\n            'alert-danger': type === 'error'\r\n        })}>\r\n            {text && <button onClick={onClick} className=\"close\"><span>&times;</span></button>}\r\n            {text}\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport NavigationBar from './components/NavigationBar/NavigationBar';\r\nimport Landing from './components/Landing/Landing';\r\nimport Login from './components/Login/Login';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport Register from './components/Register/Register';\r\nimport Profile from './components/Profile/Profile'\r\nimport Post from './components/Post/Post'\r\nimport FlashMessage from './components/FlashMessage/FlashMessage'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCurrentUser, selectUser } from './features/auth/authSlice'\r\nimport setAuthTokenAsHeader from './setAuthTokenAsHeader'\r\nimport { getProfile, validateToken } from './UserFunctions'\r\nimport { addFlashMessage } from './features/flashMesssage/flashMessageSlice';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(selectUser)\r\n\r\n  //Each time the page is loaded, it is checked, whether a jwt token is stored in the local storage\r\n  //If yes, the user is logged in automatically\r\n  useEffect(() => {\r\n    if(localStorage.getItem('usertoken')) {\r\n      var token = localStorage.getItem('usertoken')\r\n      setAuthTokenAsHeader(token)\r\n      if(!user.firstName) {\r\n        getProfile().then(res => {\r\n          if(res.errors) {\r\n            localStorage.removeItem('usertoken')\r\n            dispatch(addFlashMessage({ \r\n              text: res.errors.tokenExpired,\r\n              type: \"error\"\r\n            }))\r\n          }else {\r\n            dispatch(setCurrentUser(res))\r\n          }\r\n        })\r\n      }else {\r\n        validateToken().then(res => {\r\n          if(res.errors) {\r\n            localStorage.removeItem('usertoken')\r\n            dispatch(addFlashMessage({ \r\n              text: res.errors.tokenExpired,\r\n              type: \"error\"\r\n            }))\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavigationBar/>\r\n        <FlashMessage/>\r\n        <Route exact path=\"/\" component={Landing} />\r\n          <div className=\"container\">\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/profile\" component={Profile} />\r\n            <Route exact path=\"/posts\" component={Post} />\r\n          </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid'\r\n\r\nexport const postSlice = createSlice({\r\n  name: 'post',\r\n  initialState: {\r\n    posts: []\r\n  },\r\n  reducers: {\r\n    addPost: (state, action) => {\r\n        const post = { \r\n          postHeader: action.payload.header,\r\n          postContent: action.payload.text,\r\n          postCreator: action.payload.creator,\r\n          created: Date.now(),\r\n          postId: shortid.generate()\r\n        }\r\n        state.posts.push(post)\r\n    },\r\n    removePost: (state, action) => {\r\n        const index = state.posts.indexOf(post => post.postId === action.payload.postId)\r\n        state.posts.splice(index, 1)\r\n    }\r\n  },\r\n});\r\n\r\nexport const { addPost, removePost } = postSlice.actions;\r\nexport const selectPosts = state => state.post.posts\r\n\r\nexport default postSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from '../src/features/auth/authSlice';\r\nimport flashMessageReducer from '../src/features/flashMesssage/flashMessageSlice'\r\nimport postReducer from '../src/features/post/postSlice'\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    flashMessage: flashMessageReducer,\r\n    post: postReducer\r\n  },\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>  \r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}