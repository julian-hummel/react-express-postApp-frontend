{"version":3,"sources":["features/auth/authSlice.js","features/flashMesssage/flashMessageSlice.js","setAuthTokenAsHeader.js","components/NavigationBar/NavigationBar.jsx","components/Landing/Landing.jsx","components/Login/Login.jsx","UserFunctions.js","components/Register/Register.jsx","components/Profile/Profile.jsx","components/Post/Post.jsx","components/FlashMessage/FlashMessage.jsx","App.js","serviceWorker.js","features/post/postSlice.js","store.js","index.js"],"names":["authSlice","createSlice","name","initialState","isAuthenticated","user","admin","reducers","setCurrentUser","state","action","isEmpty","payload","role","logoutCurrentUser","localStorage","removeItem","actions","selectUser","auth","selectAuth","selectAdmin","flashMessageSlice","text","type","addFlashMessage","deleteFlashMessage","selectText","flashMessage","selectType","setAuthTokenAsHeader","token","axios","defaults","headers","common","NavigationBar","props","useSelector","isAdmin","dispatch","useDispatch","useState","sessionTime","setSessionTime","useEffect","getItem","exp","jwt_decode","Date","now","diff","Math","round","computeCounter","loginBtn","Nav","Item","Button","className","href","variant","size","logoutBtn","onClick","window","location","reload","sessionCounter","id","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Link","Landing","jwtDecode","firstName","Login","email","setEmail","password","setPassword","errors","setErrors","isLoading","setIsLoading","Form","onSubmit","e","preventDefault","post","then","response","setItem","data","login","res","history","push","finally","setTimeout","autoComplete","Group","Control","required","placeholder","value","onChange","target","disabled","block","Register","setFirstName","lastName","setLastName","repeatPassword","setRepeatPassword","newUser","register","catch","error","console","Row","Col","Profile","userApp","willBeNotificated","setWillBeNotificated","setisLoading","_id","notification","put","err","warn","updateUser","controlId","Check","label","Post","postHeader","setPostHeader","postContent","setPostContent","result","setResult","fetchedComments","setFetchedComments","showAddComment","setShowAddComment","showComments","setShowComments","showPostForm","setShowPostForm","commentContent","setCommentContent","relatedPost","setRelatedPost","postCreator","creatorName","get","reverse","handleAddCommentClose","handleShowCommentsClose","handleShowPostFormClose","fetchComments","getRelatedComments","postForm","Fragment","Modal","show","onHide","Header","closeButton","Title","Body","aria-label","Footer","submitPost","postId","shortid","generate","Label","as","rows","comment","content","creator","submitComment","length","map","Card","style","width","Text","created","split","substring","lastIndexOf","delete","Subtitle","FlashMessage","classnames","App","tokenExpired","exact","path","component","Boolean","hostname","match","postSlice","posts","addPost","header","removePost","index","indexOf","splice","configureStore","reducer","authReducer","flashMessageReducer","postReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4e6c5140.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    admin: false\r\n  },\r\n  reducers: {\r\n    setCurrentUser: (state, action) => {\r\n        state.isAuthenticated = !isEmpty(action.payload)\r\n        state.user = action.payload\r\n        state.admin = (action.payload.role === \"admin\")\r\n    },\r\n    logoutCurrentUser: state => {\r\n        state.isAuthenticated = false\r\n        state.user = {}\r\n        localStorage.removeItem('usertoken')\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCurrentUser, logoutCurrentUser } = authSlice.actions;\r\n\r\nexport const selectUser = state => state.auth.user;\r\nexport const selectAuth = state => state.auth.isAuthenticated;\r\nexport const selectAdmin = state => state.auth.admin;\r\n\r\nexport default authSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const flashMessageSlice = createSlice({\r\n  name: 'flashMessage',\r\n  initialState: {\r\n    text: \"\",\r\n    type: \"\"\r\n  },\r\n  reducers: {\r\n    addFlashMessage: (state, action) => {\r\n        state.text = action.payload.text\r\n        state.type = action.payload.type\r\n    },\r\n    deleteFlashMessage: state => {\r\n        state.text = \"\"\r\n        state.type = \"\"\r\n    }\r\n  },\r\n});\r\n\r\nexport const { addFlashMessage, deleteFlashMessage } = flashMessageSlice.actions;\r\n\r\nexport const selectText = state => state.flashMessage.text\r\nexport const selectType = state => state.flashMessage.type\r\n\r\nexport default flashMessageSlice.reducer;","import axios from 'axios';\r\n\r\nexport default function setAuthTokenAsHeader(token) {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport {Navbar, Nav, Button} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectAuth, logoutCurrentUser, selectAdmin } from '../../features/auth/authSlice'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\nimport './style.css';\r\nimport setAuthTokenAsHeader from '../../setAuthTokenAsHeader'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nexport default function NavigationBar(props) {\r\n    const isAuthenticated = useSelector(selectAuth)\r\n    const isAdmin = useSelector(selectAdmin)\r\n    const dispatch = useDispatch()\r\n    const [sessionTime, setSessionTime] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setSessionTime(computeCounter())\r\n    }, []);\r\n   \r\n    const loginBtn = (\r\n        <Nav.Item><Button className=\"loginButton\" href=\"#login\" variant=\"primary\" size=\"sm\">Login</Button>{' '}</Nav.Item>\r\n    );\r\n    const logoutBtn = (     \r\n        <Nav.Item><Button onClick={handleLogout} className=\"logoutButton\" variant=\"primary\" size=\"sm\">Logout</Button>{' '}</Nav.Item>\r\n    );\r\n\r\n    const sessionCounter = (\r\n        <Nav.Item><Button id=\"sessionCounter\" variant=\"outline-primary\" size=\"sm\">Sitzung endet in: {sessionTime} min</Button>{' '}</Nav.Item>\r\n    );\r\n\r\n    function handleLogout() {\r\n        dispatch(logoutCurrentUser())\r\n        dispatch(addFlashMessage({\r\n            text: \"Sie wurden erfolgreich ausgeloggt.\",\r\n            type: \"success\"\r\n        }))\r\n        setAuthTokenAsHeader(false)\r\n        window.location.reload()\r\n    }\r\n\r\n    function computeCounter() {\r\n        const token = localStorage.getItem('usertoken')\r\n        if(token) {\r\n            const { exp } = jwt_decode(token)\r\n            if (!(Date.now() >= exp * 1000)) {\r\n                var diff = exp*1000 - Date.now()\r\n                return Math.round(((diff % 86400000) % 3600000) / 60000)\r\n            }else {\r\n                return 0\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar id=\"navbar\" bg=\"light\" expand=\"lg\">\r\n            <Navbar.Brand id=\"logo\" href=\"#\">Socializor</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Item><Nav.Link id=\"posts\" href=\"#posts\">Sprüche</Nav.Link></Nav.Item>\r\n                    {!isAuthenticated && <Nav.Item><Button className=\"registerButton\" href=\"#register\" variant=\"primary\" size=\"sm\">Registrieren</Button>{' '}</Nav.Item>}\r\n                    {isAuthenticated && <Nav.Item><Button href=\"#profile\" className=\"profileButton\" variant=\"primary\" size=\"sm\">Profil</Button>{' '}</Nav.Item>}\r\n                </Nav>\r\n                <Nav className=\"ml-auto\">\r\n                    {isAuthenticated && sessionCounter}\r\n                    {isAdmin && <Nav.Item><Button id=\"adminBtn\" size=\"sm\" variant=\"outline-danger\">Admin</Button>{''}</Nav.Item>}\r\n                    {isAuthenticated? logoutBtn : loginBtn}\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar> \r\n    )  \r\n}","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport jwtDecode from 'jwt-decode'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAuth } from '../../features/auth/authSlice'\r\n\r\nexport default function Landing() {\r\n    const token = localStorage.getItem('usertoken')\r\n    const isAuthenticated = useSelector(selectAuth)\r\n\r\n    let name = \"\"\r\n    if(token && isAuthenticated) {\r\n      const user = jwtDecode(token)\r\n      name = user.firstName\r\n    }\r\n\r\n    return(        \r\n      <div className=\"container\">\r\n        <div className=\"jumbotron mt-5\">\r\n          <div className=\"col-sm-8 mx-auto\">\r\n            <h1 className=\"text-center\">Willkommen {name}</h1>\r\n          </div>\r\n        </div>\r\n      </div>    \r\n    );  \r\n}","import React, { useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { login } from '../../UserFunctions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentUser } from '../../features/auth/authSlice'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\n  \r\nexport default function Login(props) {\r\n    const [ email, setEmail ] = useState('')\r\n    const [ password, setPassword ] = useState('')\r\n    const [ errors, setErrors ] = useState({ })\r\n    const [ isLoading, setIsLoading ] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        setErrors({ })\r\n        const user = { email, password }\r\n\r\n        dispatch(setCurrentUser({ email }))\r\n\r\n        login(user).then(res => {\r\n          if (!res.errors) {\r\n            dispatch(addFlashMessage({ \r\n                text: \"Der Login war erfolgreich\",\r\n                type: \"success\"\r\n            }))\r\n            props.history.push(`/`)\r\n          }else {\r\n            setErrors(res.errors)\r\n            dispatch(addFlashMessage({ \r\n                text: \"Der Login war nicht erfolgreich\",\r\n                type: \"error\"\r\n            }))\r\n          }\r\n        }).finally(setIsLoading(false))\r\n        setTimeout(function(){\r\n            window.location.reload()\r\n        }, 1000);\r\n    }\r\n\r\n    return(        \r\n        <div className=\"container\" id=\"loginContainer\">\r\n            <h2 className=\"brand\">JH Reactive</h2>\r\n            <Form onSubmit={onSubmit} className=\"loginForm\" autoComplete=\"off\">\r\n                {errors.login && <div className=\"alert alert-danger\">{errors.login}</div>}\r\n                <Form.Group className=\"emailField\">\r\n                    <Form.Control \r\n                        id = \"email\" required\r\n                        type=\"email\" \r\n                        placeholder=\"E-Mail-Adresse\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                    </Form.Group>\r\n\r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"password\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort\" \r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />\r\n                </Form.Group>\r\n                    \r\n                <Button disabled={isLoading} type=\"submit\" className=\"button\" variant=\"primary\" size=\"sm\" block>Einloggen</Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios'\r\n\r\nexport const register = newUser => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/users/register', newUser)  \r\n    .then(response => {\r\n      return response.data\r\n    })\r\n}\r\n\r\nexport const login = user => {\r\n    return axios\r\n      .post('https://glacial-fortress-07261.herokuapp.com/users/login', user)\r\n      .then(response => {\r\n        localStorage.setItem('usertoken', response.data)\r\n        return response.data\r\n      })\r\n}\r\n\r\nexport const getProfile = () => {\r\n  return axios\r\n    .get('https://glacial-fortress-07261.herokuapp.com/users/profile')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const validateToken = () => {\r\n  return axios\r\n    .get('https://glacial-fortress-07261.herokuapp.com/users/validateToken')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const submitPost = post => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/posts/submit', post)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const getPosts = () => {\r\n  return axios  \r\n    .get('https://glacial-fortress-07261.herokuapp.com/posts/fetch')\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const removePost = postId => {\r\n  return axios\r\n    .delete('https://glacial-fortress-07261.herokuapp.com/posts/delete/' + postId)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const sendEmails = email => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/emails/sendemail', email)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const updateUser = user => {\r\n  return axios\r\n    .put('https://glacial-fortress-07261.herokuapp.com/users/update/' + user.email + '/' + user.notification)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const submitComment = comment => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/posts/submitComment', comment)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const getRelatedComments = post => {\r\n  return axios  \r\n    .get('https://glacial-fortress-07261.herokuapp.com/posts/fetchComments/' + post)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\nexport const commentNotification = data => {\r\n  return axios\r\n    .post('https://glacial-fortress-07261.herokuapp.com/emails/commentNotification', data)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(err => {\r\n      console.warn(err)\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Col } from 'react-bootstrap';\r\nimport './style.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { register } from '../../UserFunctions';\r\nimport { useDispatch } from 'react-redux'\r\nimport { addFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\n  \r\nexport default function Register(props) {\r\n    const [firstName, setFirstName ] = useState('')\r\n    const [lastName, setLastName ] = useState('')\r\n    const [email, setEmail ] = useState('')\r\n    const [password, setPassword ] = useState('')\r\n    const [repeatPassword, setRepeatPassword ] = useState('')\r\n    const [errors, setErrors ] = useState({ })\r\n    const [isLoading, setIsLoading ] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        setErrors({ })\r\n        setIsLoading(true)\r\n\r\n        const newUser = { firstName, lastName, email, password, repeatPassword }\r\n        \r\n        register(newUser).then(res => {\r\n            if (!res.errors) {\r\n                dispatch(addFlashMessage({ \r\n                    text: \"Die Registrierung war erfolgreich\",\r\n                    type: \"success\"\r\n                }))\r\n                props.history.push(`/login`)\r\n            }else {\r\n                dispatch(addFlashMessage({ \r\n                    text: \"Die Registrierung war nicht erfolgreich\",\r\n                    type: \"error\"\r\n                }))\r\n                setErrors(res.errors)\r\n            }\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        }).finally(()=>{\r\n            setIsLoading(false)\r\n        }) \r\n    }\r\n    \r\n    return(    \r\n        <div className=\"container\" id=\"registerContainer\">\r\n            <h2 className=\"brand\">JH Reactive</h2>\r\n            <Form onSubmit={onSubmit} className=\"registerForm\" autoComplete=\"off\">\r\n                {errors.user && <div className=\"alert alert-danger\">{errors.user}</div>}\r\n                {errors.repeatPassword && <div className=\"alert alert-danger\">{errors.repeatPassword}</div>}\r\n                <Form.Group className=\"nameRow\">\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <Form.Control \r\n                                id=\"firstName\" required\r\n                                placeholder=\"Vorname\" \r\n                                value={firstName}\r\n                                onChange={e => setFirstName(e.target.value)} \r\n                            />\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Control \r\n                                id=\"lastName\" required\r\n                                placeholder=\"Nachname\" \r\n                                value={lastName}\r\n                                onChange={e => setLastName(e.target.value)}  \r\n                            />\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form.Group>\r\n                    \r\n                <Form.Group className=\"emailField\">\r\n                    <Form.Control \r\n                        id=\"email\" required\r\n                        type=\"email\" \r\n                        placeholder=\"E-Mail-Adresse\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}   \r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"password\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)} \r\n                    />\r\n                </Form.Group>\r\n                \r\n                <Form.Group className=\"passwordField\">\r\n                    <Form.Control \r\n                        id=\"repeatPassword\" required\r\n                        type=\"password\" \r\n                        placeholder=\"Passwort wiederholen\" \r\n                        value={repeatPassword}\r\n                        onChange={e => setRepeatPassword(e.target.value)}     \r\n                    />\r\n                </Form.Group>\r\n\r\n                <Button \r\n                    disabled={isLoading} \r\n                    type=\"submit\" \r\n                    className=\"button\" \r\n                    variant=\"primary\" \r\n                    size=\"sm\" block>\r\n                        Registrieren\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../../features/auth/authSlice'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { updateUser } from './../../UserFunctions'\r\nimport { useState } from 'react';\r\n\r\nexport default function Profile(props) {\r\n    const userApp = useSelector(selectUser)\r\n    const [willBeNotificated, setWillBeNotificated] = useState(false)\r\n    const [isLoading, setisLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      if(!localStorage.getItem('usertoken')) {\r\n        props.history.push('/login')\r\n      }\r\n    })\r\n\r\n    function onSubmit() {\r\n      setisLoading(true)\r\n      var user = {}\r\n      user.email = userApp.email\r\n      user.notification = willBeNotificated\r\n\r\n      updateUser(user)\r\n      .finally(setisLoading(false))\r\n    }\r\n    \r\n    return(        \r\n      <div className=\"container\">\r\n        <div className=\"jumbotron mt-5\">\r\n          <div className=\"col-sm-8 mx-auto\">\r\n            <h1 className=\"text-center\">PROFIL</h1>\r\n            <p>Vorname: {userApp.firstName}</p>\r\n            <p>Nachname: {userApp.lastName}</p>\r\n            <p>Email: {userApp.email}</p>\r\n            <p>id: {userApp._id}</p>\r\n            <Form onSubmit={onSubmit}>\r\n              <Form.Group controlId=\"formBasicCheckbox\">\r\n                <Form.Check disabled={isLoading} onClick={ e => setWillBeNotificated(!willBeNotificated) } type=\"checkbox\" label=\"Ich will Mitteilungen erhalten\" />\r\n              </Form.Group>\r\n              <Button size=\"sm\" variant=\"primary\" type=\"submit\">Speichern</Button>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>    \r\n    );  \r\n}","import React, { useState } from 'react'\r\nimport { Button, Form, Modal, Card } from \"react-bootstrap\"\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAuth, selectUser, selectAdmin } from '../../features/auth/authSlice'\r\nimport { getPosts, submitPost, removePost, sendEmails, submitComment, getRelatedComments, commentNotification } from '../../UserFunctions';\r\nimport shortid from 'shortid'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './style.css'\r\nimport { useEffect } from 'react';\r\n\r\nexport default function Post() {\r\n    const [ postHeader, setPostHeader ] = useState('')\r\n    const [ postContent, setPostContent ] = useState('')\r\n    const [ result, setResult ] = useState([])\r\n    const [ fetchedComments, setFetchedComments ] = useState([])\r\n    const [ isLoading, setIsLoading ] = useState(false)\r\n    const [ showAddComment, setShowAddComment ] = useState(false)\r\n    const [ showComments, setShowComments ] = useState(false)\r\n    const [ showPostForm, setShowPostForm ] = useState(false)\r\n    const [ commentContent, setCommentContent ] = useState('')\r\n    const [ relatedPost, setRelatedPost ] = useState('')\r\n    const isAuthenticated = useSelector(selectAuth)\r\n    const postCreator = useSelector(selectUser)\r\n    const isAdmin = useSelector(selectAdmin)\r\n    const creatorName = postCreator.firstName + \" \" + postCreator.lastName\r\n\r\n    useEffect(() => {\r\n        fetchPosts()\r\n    }, []);\r\n\r\n    const handleAddCommentClose = () => setShowAddComment(false)\r\n    const handleAddCommentShow = () => setShowAddComment(true)\r\n\r\n    const handleShowCommentsClose = () => setShowComments(false)\r\n    const handleShowCommentsShow = () => setShowComments(true)\r\n\r\n    const handleShowPostFormClose = () => setShowPostForm(false)\r\n    const handleShowPostFormShow = () => setShowPostForm(true)\r\n\r\n    /*\r\n     * Posts the given post to the database\r\n     */\r\n    function onSubmit(e) {\r\n        e.preventDefault()\r\n        setIsLoading(true)\r\n        const post = { postHeader, postContent, creatorName, postId: shortid.generate() }\r\n        submitPost(post).finally(() => {\r\n            setIsLoading(false)\r\n            window.location.reload()\r\n        })\r\n        sendEmails(postCreator.email)\r\n    }\r\n\r\n    /*\r\n     * Submits comment to the database. Attribute with related postId is added to the comment, to\r\n     * find the releated post for rendering.\r\n     */\r\n    function postComment() {\r\n        setShowAddComment(false)\r\n        var comment = {\r\n            content: commentContent,\r\n            creator: creatorName,\r\n            post: relatedPost \r\n        }\r\n        submitComment(comment) \r\n        commentNotification(comment)\r\n    }\r\n\r\n    /*\r\n     * Returns array of all posts, fetched from the database\r\n     */\r\n    function fetchPosts() {\r\n        getPosts().then((res) => setResult(res.reverse()))\r\n    }\r\n\r\n    function fetchComments(post) {\r\n        getRelatedComments(post).then((res) => setFetchedComments(res.reverse()))\r\n    }\r\n\r\n    const postForm = (\r\n        <React.Fragment>\r\n            <Button id=\"createPostBtn\" variant=\"primary\" onClick={handleShowPostFormShow}>Neuer Spruch</Button>\r\n\r\n            <Modal show={showPostForm} onHide={handleShowPostFormClose}>\r\n                <Modal.Header closeButton> \r\n                <Modal.Title>Einen neuen Spruch verfassen</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form id=\"postForm\" autoComplete=\"off\">\r\n                        <Form.Group>\r\n                            <Form.Control\r\n                                id=\"postHeader\" required\r\n                                placeholder=\"Spruch-Überschrift\"\r\n                                onChange={e => setPostHeader(e.target.value)}\r\n                                value={postHeader}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <textarea \r\n                                id=\"postContent\" required\r\n                                className=\"form-control\" \r\n                                aria-label=\"With textarea\"\r\n                                placeholder=\"Inhalt\"\r\n                                onChange={e => setPostContent(e.target.value)}\r\n                                value={postContent}\r\n                            />\r\n                        </Form.Group> \r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleShowPostFormClose}>\r\n                    Schließen\r\n                </Button>\r\n                <Button disabled={isLoading} variant=\"primary\" onClick={onSubmit}>\r\n                    Post veröffentlichen\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n \r\n            <Modal show={showAddComment} onHide={handleAddCommentClose}>\r\n                <Modal.Header closeButton> \r\n                <Modal.Title>Neuen Kommentar verfassen</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Inhalt</Form.Label>\r\n                        <Form.Control \r\n                            value={commentContent} \r\n                            onChange={e => setCommentContent(e.target.value)} \r\n                            as=\"textarea\" rows={4} \r\n                        />\r\n                    </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleAddCommentClose}>\r\n                    Schließen\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={postComment}>\r\n                    Kommentieren\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            \r\n            <Modal show={showComments} onHide={handleShowCommentsClose}>\r\n                <Modal.Header closeButton> \r\n                <Modal.Title>Kommentare</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {\r\n                        fetchedComments.length === 0 ? <p>Es gibt noch keine Kommentare</p> :\r\n                        fetchedComments.map(comment => \r\n                            <Card id=\"comment\" style={{ width: '25rem' }}>\r\n                                <Card.Body>\r\n                                    <Card.Title>{'Kommentar von ' + comment.creator}</Card.Title>\r\n                                    <Card.Text>{comment.content}</Card.Text>\r\n                                    <footer className=\"blockquote-footer\">{comment.created.split('T')[0] + ' ' + comment.created.substring(comment.created.lastIndexOf('T')+1, comment.created.lastIndexOf('.'))}</footer>\r\n                                </Card.Body>\r\n                            </Card>\r\n                    )}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleShowCommentsClose}>\r\n                    Schließen\r\n                </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return(\r\n        <div id=\"container\">\r\n            {isAuthenticated && postForm}\r\n            {\r\n                result.length && <ul>\r\n                    {result.map(res => \r\n                        <div id=\"postContainer\">\r\n                            <Card id=\"singlePost\" style={{ width: '25rem' }}>\r\n                                <Card.Body>\r\n                                    {isAdmin && <Button onClick={e => removePost(e.target.name).then(() => window.location.reload())} type=\"submit\" id=\"removePostBtn\" name={res._id} variant=\"danger\" size=\"sm\">Spruch löschen</Button>}\r\n                                    <Card.Title>{res.postHeader}</Card.Title>\r\n                                <Card.Subtitle className=\"mb-2 text-muted\">{'veröffentlicht von ' + res.creatorName}</Card.Subtitle>\r\n                                    <Card.Text>{res.postContent}</Card.Text>\r\n                                    <footer className=\"blockquote-footer\">{res.created.split('T')[0] + ' ' + res.created.substring(res.created.lastIndexOf('T')+1, res.created.lastIndexOf('.'))}</footer>\r\n                                        {isAuthenticated && <Button onClick={() => {\r\n                                            fetchComments(res.postId)\r\n                                            handleShowCommentsShow()\r\n                                        }}\r\n                                        variant=\"link\">\r\n                                            Kommentare anzeigen\r\n                                    </Button>}\r\n\r\n                                    {isAuthenticated && <Button onClick={() => {\r\n                                            setRelatedPost(res.postId)\r\n                                            handleAddCommentShow()\r\n                                        }}\r\n                                        variant=\"link\">\r\n                                            Kommentieren\r\n                                    </Button>}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </div>\r\n                    )}\r\n                </ul>\r\n            }\r\n        </div> \r\n            \r\n    )\r\n}","import React from 'react'\r\nimport classnames from 'classnames'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectText, selectType } from '../../features/flashMesssage/flashMessageSlice'\r\nimport { deleteFlashMessage } from '../../features/flashMesssage/flashMessageSlice'\r\nimport './style.css'\r\n\r\nexport default function FlashMessage() {\r\n    const text = useSelector(selectText)\r\n    const type = useSelector(selectType)\r\n    const dispatch = useDispatch()\r\n\r\n    function onClick() {\r\n        dispatch(deleteFlashMessage())\r\n    }\r\n\r\n    return(\r\n        <div id=\"message\" className={classnames('alert', {\r\n            'alert-success': type === 'success',\r\n            'alert-danger': type === 'error'\r\n        })}>\r\n            {text && <button onClick={onClick} className=\"close\"><span>&times;</span></button>}\r\n            {text}\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport NavigationBar from './components/NavigationBar/NavigationBar';\r\nimport Landing from './components/Landing/Landing';\r\nimport Login from './components/Login/Login';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport Register from './components/Register/Register';\r\nimport Profile from './components/Profile/Profile'\r\nimport Post from './components/Post/Post'\r\nimport FlashMessage from './components/FlashMessage/FlashMessage'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setCurrentUser, selectUser } from './features/auth/authSlice'\r\nimport setAuthTokenAsHeader from './setAuthTokenAsHeader'\r\nimport { getProfile, validateToken } from './UserFunctions'\r\nimport { addFlashMessage } from './features/flashMesssage/flashMessageSlice';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const user = useSelector(selectUser)\r\n\r\n  //Each time the page is loaded, it is checked, whether a jwt token is stored in the local storage\r\n  //If yes, the user is logged in automatically\r\n  useEffect(() => {\r\n    if(localStorage.getItem('usertoken')) {\r\n      var token = localStorage.getItem('usertoken')\r\n      setAuthTokenAsHeader(token)\r\n      if(!user.firstName) {\r\n        getProfile().then(res => {\r\n          if(res.errors) {\r\n            localStorage.removeItem('usertoken')\r\n            dispatch(addFlashMessage({ \r\n              text: res.errors.tokenExpired,\r\n              type: \"error\"\r\n            }))\r\n          }else {\r\n            dispatch(setCurrentUser(res))\r\n          }\r\n        })\r\n      }else {\r\n        validateToken().then(res => {\r\n          if(res.errors) {\r\n            localStorage.removeItem('usertoken')\r\n            dispatch(addFlashMessage({ \r\n              text: res.errors.tokenExpired,\r\n              type: \"error\"\r\n            }))\r\n          }\r\n        })\r\n      }\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <NavigationBar/>\r\n        <FlashMessage/>\r\n        <Route exact path=\"/\" component={Landing} />\r\n        <Route path=\"/register\" component={Register} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/profile\" component={Profile} />\r\n        <Route path=\"/posts\" component={Post} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid'\r\n\r\nexport const postSlice = createSlice({\r\n  name: 'post',\r\n  initialState: {\r\n    posts: []\r\n  },\r\n  reducers: {\r\n    addPost: (state, action) => {\r\n        const post = { \r\n          postHeader: action.payload.header,\r\n          postContent: action.payload.text,\r\n          postCreator: action.payload.creator,\r\n          created: Date.now(),\r\n          postId: shortid.generate()\r\n        }\r\n        state.posts.push(post)\r\n    },\r\n    removePost: (state, action) => {\r\n        const index = state.posts.indexOf(post => post.postId === action.payload.postId)\r\n        state.posts.splice(index, 1)\r\n    }\r\n  },\r\n});\r\n\r\nexport const { addPost, removePost } = postSlice.actions;\r\nexport const selectPosts = state => state.post.posts\r\n\r\nexport default postSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from '../src/features/auth/authSlice';\r\nimport flashMessageReducer from '../src/features/flashMesssage/flashMessageSlice'\r\nimport postReducer from '../src/features/post/postSlice'\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    flashMessage: flashMessageReducer,\r\n    post: postReducer\r\n  },\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>  \r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}